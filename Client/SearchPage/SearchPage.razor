@page "/Search"
@inject HttpClient Http
@using MDR_FuiPortal.Client.SearchPage.InputComponents
@using MDR_FuiPortal.Client.SearchPage.ResultComponents
@using System.Text.RegularExpressions;

<PageTitle>MDR Search</PageTitle>

<TopBarSearch onFiltersBarVisibilityChanged="ChangeFiltersBarVisibility" />

<div id="body-outer">
    <div id="body-main">

        @if (filtersBarShowing)
        {
            <div id="left-bar">
                <div id="filters-container">
                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Type" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupType OnFeedbackChange="updateTypeFBack" OnSQLChange="updateTypeSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Status" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupStatus OnFeedbackChange="updateStatusFBack" OnSQLChange="updateStatusSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Start Year" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <YearSelection OnFeedbackChange="updateYearFBack" OnSQLChange="updateYearSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Location" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CountrySelection onListChanged="updateCountryList" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Linked Object" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupObject OnFeedbackChange="updateObjectFBack" OnSQLChange="updateObjectSQL" />
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>

                    <div class="filter-expln">
                        <p class="small-text small-text-expanded">
                            <b>N.B.</b>The two filters below only apply to interventional studies (= clinical trials).<br /><br />
                            If included in a query the results will be drawn <b><i>only</i></b> from interventional studies.
                        </p>
                    </div>

                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Phase" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupPhase OnFeedbackChange="updatePhaseFBack" OnSQLChange="updatePhaseSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Allocation" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupAlloc OnFeedbackChange="updateAllocFBack" OnSQLChange="updateAllocSQL"/>
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>
                </div>
            </div>
        }

        <div id="middle-bar">

            <div id="fixed-top">   <!-- Fixed area at top-->
                <div id="search-bar">
                    <div id="search-type">
                        <div class="search-label-container">
                            <p class="search-label normal-blue-text">Search Type</p>
                        </div>
                        <div id="search-type-combo" >
                            <MDRComboBox idOptions="searchOptions" 
                             HandleSelectedOptionChanged="SearchOptionChanged"></MDRComboBox>
                        </div>
                    </div>

                    @if (searchType == 2)
                    {
                        <div id="search-subtype">
                            <div class="search-label-container">
                                <p class="search-label normal-blue-text">ID Type</p>
                            </div>
                            <div id="id-type-combo">
                                <MDRComboBox idOptions="idOptions"
                                  HandleSelectedOptionChanged="idOptionChanged"></MDRComboBox>
                            </div>
                        </div>
                    }

                    <div id="search-params">
                         <div class="search-label-container">
                            <p class="search-label normal-blue-text">@paramsLabelText</p>
                        </div>
                        <div id="params-text">
                            <input type="text" @bind="@searchParamsValue" @bind:event="oninput"
                                               style="width: 100%;" />
                        </div>
                    </div>
                </div>
                           
                <div id="switch-area">
                    <ClearButton id="ClearFilters" Caption="Clear Filters" onClicked="ClearFilters" />
                    <div id="small-switch-spacer"></div>
                    <ClearButton id="ClearSearch" Caption="Clear Search" onClicked="ClearSearch" />
                    <div id="switch-spacer"></div>
                    <div id="agg-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=aggregateSearches style="margin-inline-end: 12px;">Aggregate Results</FluentSwitch>
                    </div>
                    <div id="switch-spacer"></div>
                    <div id="tt-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=searchInTTs style="margin-inline-end: 12px;">Search in Titles and Topics</FluentSwitch>
                    </div>
                    <div id="cond-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=searchInConds style="margin-inline-end: 12px;">Search in Conditions</FluentSwitch>
                    </div>
                </div>

                <div id="feedback">
                    <div id="fb-container">
                        <p class="small-text-italic">
                            @if (searchType == 1)
                            {
                                <span>KEY WORDS SEARCH, using @searchParamsValue, in @scope_fback; <br />
                                FILTER(S): @filter_fback</span>
                            }
                            @if (searchType == 2)
                            {
                                <span>ID SEARCH, using type: @idType (@idText), ID: @searchParamsValue</span>
                            }
                            @if (searchType == 3)
                            {
                                <span>PMID SEARCH, using @searchParamsValue</span>
                            }
                        </p>
                    </div>
                    <div id="sql-container">
                        <p class="small-text-italic">
                            @if (searchType == 1)
                            {
                                <span>
                                    @search_url <br />
                                    FILTER(S): @filter_sql
                                </span>
                            }
                            @if (searchType == 2)
                            {
                                <span>@search_url</span>
                            }
                            @if (searchType == 3)
                            {
                                <span>@search_url</span>
                            }
                        </p>
                    </div>
                </div>

                <div id="results-heading">
                    <div id="results-found">
                        <p class="small-text no-wrap-text">@rec_num_indicator</p>
                    </div>
                    <div id="results-spacer"> </div>
                    <div id="page-control">
                        <PageControl total_recs=rec_num ObtainRange="ShowRange" @ref="pagecon"/>
                    </div>
                </div>
            </div>

            <div id="fixed-results-container">
                <SpinLoader IsLoading="isLoading" IsFaulted="isEmpty">
                    <LoadingTemplate>
                        <div style="height:100px; margin-top:3rem;">
                            <Circle Color="royalblue" Size="60px" Center="true" />
                        </div>
                    </LoadingTemplate>
                    <ContentTemplate>
                        <div id="results-list">         <!-- Scrolling area -->
                            <FluentDesignSystemProvider FillColor="#fdfeff">     <!-- was #ecedee -->
                            @if (@PageSet is not null)
                            {   
                                <FluentAccordion>
                                    <PageContents Contents=@PageSet />
                                </FluentAccordion>
                            }
                            </FluentDesignSystemProvider>
                        </div>
                    </ContentTemplate>
                    <FaultedContentTemplate>
                        <div style="height:100px; margin-top:3rem;">
                            <p class="normal-blue-text" style="text-align: center; font-style: italic;">No records were found matching these search criteria</p>
                        </div>
                    </FaultedContentTemplate>
                </SpinLoader>
            </div>
        </div>

        <div id="right-bar">
            <SearchButton id="SearchButton" Caption="Search" onClicked="Search" />
        </div>
    </div>
</div>

@code {

    List<string>? BaseSet;
    List<string>? ShowSet;
    List<string>? PageSet = null;
    PageControl? pagecon;

    int rec_num;
    int num_pages;
    int num_recs_per_page = 10;
    string rec_num_indicator = "No search yet run";
    int current_page = 1;
    string page_indicator = "";
    string search_url = "";

    bool filtersBarShowing = true;

    private Dictionary<string, string> roman_suffixes = default!;

    private void ChangeFiltersBarVisibility(bool visibility)
    {
        filtersBarShowing = visibility;
    }

    bool isLoading = false;
    bool isEmpty = false;
    
    private async Task Search()
    {
        isLoading = true;
        isEmpty = false;

        search_url = "api/Study/";
        if (searchType == 1)
        {
            int search_scope = searchInTTs ? 1 : 0; 
            search_scope += searchInConds ? 2 : 0;

            if (!string.IsNullOrEmpty(searchParamsValue))
            {
                string processedPars = ProcessSearchParams(searchParamsValue);
                search_url += $"BySearch/{search_scope}/{processedPars}";
            }
        }

        if (searchType == 2)
        {

            search_url += $"ByRegId/{idType}/{searchParamsValue}";
        }

        if (searchType == 3)
        {
            string? pmid = searchParamsValue;
            if (pmid is null || !int.TryParse(pmid, out int _))
            {
                string fb_message = "The PMID input must be an integer";
                // need some sort of message
                // saying this is not valid
            }
            else
            {
                search_url += $"ByPMID/{searchParamsValue}";
            }
        }

        BaseSet = await Http.GetFromJsonAsync<List<string>?>(search_url);
        if (BaseSet?.Any() == true)
        {
            // if filter(s) set - apply filter using linq

            if (pagecon is not null)
            {
                pagecon.old_num_recs = 0;   // reset this page control's property
            }

            ShowSet =  BaseSet;  // for now, no filters!

            rec_num = ShowSet.Count;
            rec_num_indicator = ShowSet.Count.ToString() + " Record";
            rec_num_indicator += rec_num == 1 ? "" : "s";
            rec_num_indicator += " found";


            // setting rec_num will trigger the page control
            // to set up the initial page contents call, 1 to n
            // After that the page control's buttons will get the
            // relevant portion of the 'show set'

            // may be better to use two separate mechnanisms here!
            // One for navigating through a set, one for the initial
            // 1 to n set... needs further thought. Perhaps don't have 
            // num_recs as a parameter - instead set as a property
            // using ref - stops the infinite loop that is set up otherwise
        }
        else
        {

            // post a 'none found message somewhere
            rec_num_indicator = "No records found";
            isEmpty = true;
        }
        isLoading = false;

    }


    private void ShowRange(Tuple<int, int> t)
    {
        // PageSet = null;
        PageSet = ShowSet?.GetRange(t.Item1, t.Item2);
    }

    private void ClearFilters()
    {
        Console.WriteLine("boo - I am still clearing filters");
    }

    private void ClearSearch()
    {
        Console.WriteLine("boo - I am still clearing searches");
    }

    private void RemoveUnchecked()
    {
        Console.WriteLine("boo - I am still removing the unchecked");
    }

    string? searchText;
    int searchType = 1;
    string? idText;
    int? idType = 1;
    string? searchParamsValue;
    string paramsLabelText = "Parameters";
    bool SearchPossible = false;

    bool aggregateSearches = false;
    bool searchInTTs = true;
    bool searchInConds = true;

    private void RecalculateSearchFeedback()
    {
        // Provide the text for the 'SQL area'

    }

    private bool RecalculateSearchSQL()
    {
        // provide the where clause for a SQL query (though this may be modified
        // at the server). Returns true or false dependent on whether query is possible.

        search_url = "api/Study/";
        if (searchType == 1)
        {
            int search_scope = searchInTTs ? 1 : 0;
            search_scope += searchInConds ? 2 : 0;

            if (!string.IsNullOrEmpty(searchParamsValue))
            {
                string processedPars = ProcessSearchParams(searchParamsValue);
                search_url += $"BySearch/{search_scope}/{processedPars}";
            }
        }

        if (searchType == 2)
        {

            search_url += $"ByRegId/{idType}/{searchParamsValue}";
        }

        if (searchType == 3)
        {
            string? pmid = searchParamsValue;
            if (pmid is null || !int.TryParse(pmid, out int _))
            {
                string fb_message = "The PMID input must be an integer";
                // need some sort of message
                // saying this is not valid
            }
            else
            {
                search_url += $"ByPMID/{searchParamsValue}";
            }
        }

        return true;  // for now
    }

    private string ProcessSearchParams(string in_pars)
    {
        string new_st = in_pars.ToLower() + " ";  // ' ' added to catch final numbers below
        new_st = new_st.Replace("'", "");      // simplifies things
        new_st = new_st.Replace("‘", "");
        new_st = new_st.Replace("’", "");
        new_st = new_st.Replace(".", "");      // simplifies things
        new_st = new_st.Replace("/", " ");     // split these words up

        if (new_st.Contains("in "))
        {
            new_st = new_st.Replace("in situ", "insitu");
            new_st = new_st.Replace("in vivo", "invivo");
            new_st = new_st.Replace("in vitro", "invitro");
            new_st = new_st.Replace("in silico", "insilico");
            new_st = new_st.Replace("in utero", "inutero");
        }
        if (new_st.Contains(" a "))
        {
            new_st = new_st.Replace("hepatitis a ", "hepatitis-a ");
            new_st = new_st.Replace("influenza a ", "influenza-a ");
            new_st = new_st.Replace("philia a ", "philia-a ");
            new_st = new_st.Replace("globin a ", "globin-a ");
            new_st = new_st.Replace("virus a ", "virus-a ");
            new_st = new_st.Replace("protein a ", "protein-a ");
            new_st = new_st.Replace("group a ", "group-a ");
            new_st = new_st.Replace("type a ", "type-a ");
            new_st = new_st.Replace("vitamin a ", "vitamin-a ");
            new_st = new_st.Replace("factor a ", "factor-a ");
            new_st = new_st.Replace("family a ", "family-a ");
            new_st = new_st.Replace("coenzyme a ", "coenzyme-a ");
            new_st = new_st.Replace("kinase a ", "kinase-a ");
            new_st = new_st.Replace("ferase a ", "ferase-a ");
            new_st = new_st.Replace("tidase a ", "tidase-a ");
            new_st = new_st.Replace("tidases a ", "tidases-a ");
            new_st = new_st.Replace("kinin a ", "kinin-a ");
        }
        if (new_st.Contains(" term "))
        {
            new_st = new_st.Replace("short term ", "short-term ");
            new_st = new_st.Replace("medium term ", "medium-term ");
            new_st = new_st.Replace("long term ", "long-term ");
        }
        if (Regex.IsMatch(new_st, @" \d{1,2} "))
        {
            while (Regex.IsMatch(new_st, @" \d{1,2} "))   // may be more than one
            {
                string to_replace = Regex.Match(new_st, @" \d{1,2} ").Value;
                string new_value;
                if (Regex.IsMatch(new_st, @" \d{1,2} mg"))
                {
                    new_value = to_replace[..^1]; // may be a dosage figure, usually mg;
                }
                else
                {
                    new_value = to_replace[1..];  // more often a suffix
                }
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
        {
            while (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
            {
                string to_replace = Regex.Match(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) ").Value;
                string new_value = roman_suffixes[to_replace];
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (new_st.Contains("phase "))   // some phase types not picked up above
        {
            new_st = new_st.Replace("phase 1a ", "phase1a ");
            new_st = new_st.Replace("phase 1b ", "phase1b ");
            new_st = new_st.Replace("phase 1/2 ", "phase12 ");
            new_st = new_st.Replace("phase i/ii ", "phase12 ");
            new_st = new_st.Replace("phase 2/3 ", "phase23 ");
            new_st = new_st.Replace("phase ii/iii ", "phase23 ");
            new_st = new_st.Replace("phase 2a ", "phase2a ");
            new_st = new_st.Replace("phase 2b ", "phase2b ");
            new_st = new_st.Replace("phase 3/4 ", "phase34 ");
            new_st = new_st.Replace("phase iii/iv ", "phase34 ");
        }

        new_st = new_st.Replace(" or ", " | ");  
        new_st = new_st.Replace(" not(", " !(");

        return new_st.Trim();
    }

    string filter_sql = "", filter_fback = "";
    string type_sql = "", type_fback = "";
    string status_sql = "", status_fback = "";
    string year_sql = "", year_fback = "";
    string country_sql = "", country_fback = "";
    string object_sql = "", object_fback = "";
    string phase_sql = "", phase_fback = "";
    string alloc_sql = "", alloc_fback = "";
    string scope_fback = "";
    int search_scope = 3;

    private void RecalcFilterFeedback()
    {
        string fb_string = "";
        fb_string += type_fback == "" ? "" : " AND " + type_fback;
        fb_string += status_fback == "" ? "" : " AND " + status_fback;
        fb_string += year_fback == "" ? "" : " AND " + year_fback;
        fb_string += country_fback == "" ? "" : " AND " + country_fback;
        fb_string += object_fback == "" ? "" : " AND HAS " + object_fback;
        fb_string += phase_fback == "" ? "" : " AND " + phase_fback;
        fb_string += alloc_fback == "" ? "" : " AND " + alloc_fback;
        filter_fback = fb_string == "" ? "" : fb_string[5..];
        if (filter_fback == "")
        {
            filter_fback = "None applied";
        }
        StateHasChanged();
    }

    private void updateTypeFBack(string fback)
    {
        type_fback = fback;  RecalcFilterFeedback();
    }

    private void updateStatusFBack(string fback)
    {
        status_fback = fback; RecalcFilterFeedback(); 
    }

    private void updateYearFBack(string fback)
    {
        year_fback = fback; RecalcFilterFeedback();
    }

    private void updateCountryList(List<Country> countriesSelected)
    {
        string sqlparams = ""; string fback = "";
        if (countriesSelected?.Any() == true)
        {
            foreach (Country c in countriesSelected)
            {
                fback += ", " + c.name;
                sqlparams += ", " + c.id.ToString();
            }
        }
        country_fback = $"countries include one of ({fback[2..]})";
        country_sql = $"country_id in ({sqlparams[2..]})";
        RecalcFilterFeedback();
        RecalcFilterSQL();
    }

    private void updateObjectFBack(string fback)
    {
        object_fback = fback; RecalcFilterFeedback();
    }

    private void updatePhaseFBack(string fback)
    {
        phase_fback = fback; RecalcFilterFeedback();
    }

    private void updateAllocFBack(string fback)
    {
        alloc_fback = fback; RecalcFilterFeedback();
    }


    private void RecalcFilterSQL()
    {
        string sql_string = "";
        sql_string += type_sql == "" ? "" : ", " + type_sql;
        sql_string += status_sql == "" ? "" : ", " + status_sql;
        sql_string += year_sql == "" ? "" : ", " + year_sql;
        sql_string += country_sql == "" ? "" : ", " + country_sql;
        sql_string += object_sql == "" ? "" : ", " + object_sql;
        sql_string += phase_sql == "" ? "" : ", " + phase_sql;
        sql_string += alloc_sql == "" ? "" : ", " + alloc_sql;
        filter_sql = sql_string == "" ? "" : "WITH " + sql_string[2..];
        StateHasChanged();
    }

    private void updateTypeSQL(string sql)
    {
        type_sql = sql; RecalcFilterSQL();
    }

    private void updateStatusSQL(string sql)
    {
        status_sql = sql; RecalcFilterSQL();
    }

    private void updateYearSQL(string sql)
    {
        year_sql = sql; RecalcFilterSQL();
    }

    private void updateObjectSQL(string sql)
    {
        object_sql = sql; RecalcFilterSQL();
    }

    private void updatePhaseSQL(string sql)
    {
        phase_sql = sql; RecalcFilterSQL();
    }

    private void updateAllocSQL(string sql)
    {
        alloc_sql = sql; RecalcFilterSQL();
    }


    List<Option<string>> searchOptions = default!;
    List<Option<string>> idOptions = default!;

    protected override void OnInitialized()
    {
        searchOptions = new()
        {
            { new Option<string> { Value = "1", Text = "Key word(s)", Selected = true } },
            { new Option<string> { Value = "2", Text = "Study identifier"} },
            { new Option<string> { Value = "3", Text = "Paper identifier (PMID)" } }
        };

        idOptions = new()
        {
            // needs to be updated to reflect updated identifier types

            { new Option<string> { Value = "11", Text = "Trial registry ID", Selected = true } },
            { new Option<string> { Value = "12", Text = "Ethics Review ID"} },
            { new Option<string> { Value = "13", Text = "Funder’s ID"} },
            { new Option<string> { Value = "14", Text = "Sponsor’s ID" } },
            { new Option<string> { Value = "41", Text = "Regulatory Authority ID" } },
            { new Option<string> { Value = "39", Text = "NIH CTRP ID"} },
            { new Option<string> { Value = "40", Text = "DAIDS ID"} },
            { new Option<string> { Value = "42", Text = "NHBLI ID" } },
            { new Option<string> { Value = "45", Text = "Obsolete NTR number" } },
            { new Option<string> { Value = "45", Text = "CDR Number" } }
        };


        roman_suffixes = new()
        {
            {" i ", "1 "}, {" ii ", "2 "},{" iii ", "3 "},{" iv ", "4 "},{" v ", "5 "},
            {" vi ", "6 "},{" vii ", "7 "},{" viii ", "8 "},{" ix ", "9 "},{" x ", "10 "},
            {" xi ", "11 "}, {" xii ", "12 "},{" xiii ", "13 "},{" xiv ", "14 "},{" xv ", "15 "},
            {" xvi ", "16 "},{" xvii ", "17 "},{" xviii ", "18 "},{" xix ", "19 "},{" xx ", "20 " },
            {" xxi ", "21 "},{" xxii ", "22 "},{" xxiii ", "23 "},{" xxiv ", "24 "},{" xxv ", "25 " },
            {" xxvi ", "26 "},{" xxvii ", "27 "},{" xxviii ", "28 "},
            {" xxix ", "29 "},{" xxx ", "30 " }
        };
    }


    private void SearchOptionChanged(Option<string> s)
    {
        searchText = s?.Text ?? "None";
        searchType = Int32.Parse(s?.Value ?? "0");
        paramsLabelText = searchType switch 
        {
            1 => "Words",
            2 => "Identifier",
            3 => "PubMed ID",
            _ => "Parameters"
        };

        // for now - to make testing easier

        if (searchType == 1)
        {
            idType = 11;
            searchParamsValue = "brca";
        }

        if (searchType == 2)
        {

            searchParamsValue = "NCT01746290";
        }

        if (searchType == 3)
        {

            searchParamsValue = "1017769"; // "1017769"; "462143";
        }

        RecalculateSearchFeedback();
        SearchPossible = RecalculateSearchSQL();

    }

    private void idOptionChanged(Option<string> s)
    {
        idText = s?.Text ?? "None";
        idType = Int32.Parse(s?.Value ?? "0");
        RecalculateSearchFeedback();
        SearchPossible = RecalculateSearchSQL();

        // for now - to make testing easier
        if (idType == 11)
        {
            searchParamsValue = "NCT01746290";
        }
        if (idType == 14)
        {
            searchParamsValue = "19.05.CLI";
        }
    }

}
